/* Generated by Yosys 0.22 (git sha1 f109fa3d4c5, gcc 12.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os) */

(* src = "alu_8bit.v:5.1-54.10" *)
module alu_8bit(a, b, cin, aluop, y);
  (* src = "alu_8bit.v:21.28-21.33" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _00_;
  (* src = "alu_8bit.v:24.28-24.33" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _01_;
  (* src = "alu_8bit.v:26.28-26.33" *)
  wire [7:0] _02_;
  (* src = "alu_8bit.v:27.28-27.39" *)
  wire [7:0] _03_;
  (* src = "alu_8bit.v:36.28-36.33" *)
  wire [7:0] _04_;
  (* src = "alu_8bit.v:34.29-34.31" *)
  wire [7:0] _05_;
  (* src = "alu_8bit.v:35.29-35.31" *)
  wire [7:0] _06_;
  (* src = "alu_8bit.v:38.29-38.39" *)
  wire [7:0] _07_;
  (* src = "alu_8bit.v:39.29-39.39" *)
  wire [7:0] _08_;
  (* src = "alu_8bit.v:41.29-41.37" *)
  wire [7:0] _09_;
  (* src = "alu_8bit.v:37.28-37.33" *)
  wire [7:0] _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  (* src = "alu_8bit.v:22.28-22.33" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _18_;
  (* src = "alu_8bit.v:25.28-25.33" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _19_;
  (* src = "alu_8bit.v:40.28-40.33" *)
  wire [7:0] _20_;
  (* src = "alu_8bit.v:6.15-6.16" *)
  input [7:0] a;
  wire [7:0] a;
  (* src = "alu_8bit.v:8.15-8.20" *)
  input [3:0] aluop;
  wire [3:0] aluop;
  (* src = "alu_8bit.v:12.13-12.21" *)
  wire [7:0] arithval;
  (* src = "alu_8bit.v:6.18-6.19" *)
  input [7:0] b;
  wire [7:0] b;
  (* src = "alu_8bit.v:7.9-7.12" *)
  input cin;
  wire cin;
  (* src = "alu_8bit.v:13.13-13.21" *)
  wire [7:0] logicval;
  (* src = "alu_8bit.v:9.16-9.17" *)
  output [7:0] y;
  wire [7:0] y;
  assign _00_ = a + (* src = "alu_8bit.v:21.28-21.33" *) 32'd1;
  assign _01_ = b + (* src = "alu_8bit.v:24.28-24.33" *) 32'd1;
  assign _02_ = a + (* src = "alu_8bit.v:27.28-27.33" *) b;
  assign _03_ = _02_ + (* src = "alu_8bit.v:27.28-27.39" *) cin;
  assign _04_ = a & (* src = "alu_8bit.v:38.32-38.37" *) b;
  assign _05_ = ~ (* src = "alu_8bit.v:34.29-34.31" *) a;
  assign _06_ = ~ (* src = "alu_8bit.v:35.29-35.31" *) b;
  assign _07_ = ~ (* src = "alu_8bit.v:38.29-38.39" *) _04_;
  assign _08_ = ~ (* src = "alu_8bit.v:39.29-39.39" *) _10_;
  assign _09_ = ~ (* src = "alu_8bit.v:41.29-41.37" *) _20_;
  assign _10_ = a | (* src = "alu_8bit.v:39.32-39.37" *) b;
  assign y = aluop[3] ? (* full_case = 32'd1 *) (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:48.5-51.12" *) logicval : arithval;
  function [7:0] _33_;
    input [7:0] a;
    input [55:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:33.5-42.12" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        _33_ = b[7:0];
      7'b?????1?:
        _33_ = b[15:8];
      7'b????1??:
        _33_ = b[23:16];
      7'b???1???:
        _33_ = b[31:24];
      7'b??1????:
        _33_ = b[39:32];
      7'b?1?????:
        _33_ = b[47:40];
      7'b1??????:
        _33_ = b[55:48];
      default:
        _33_ = a;
    endcase
  endfunction
  assign logicval = _33_(_09_, { _05_, _06_, _04_, _10_, _07_, _08_, _20_ }, { _17_, _16_, _15_, _14_, _13_, _12_, _11_ });
  function [7:0] _34_;
    input [7:0] a;
    input [55:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:19.5-28.12" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        _34_ = b[7:0];
      7'b?????1?:
        _34_ = b[15:8];
      7'b????1??:
        _34_ = b[23:16];
      7'b???1???:
        _34_ = b[31:24];
      7'b??1????:
        _34_ = b[39:32];
      7'b?1?????:
        _34_ = b[47:40];
      7'b1??????:
        _34_ = b[55:48];
      default:
        _34_ = a;
    endcase
  endfunction
  assign arithval = _34_(_03_, { a, _00_[7:0], _18_[7:0], b, _01_[7:0], _19_[7:0], _02_ }, { _17_, _16_, _15_, _14_, _13_, _12_, _11_ });
  assign _11_ = aluop[2:0] == (* full_case = 32'd1 *) (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:19.5-28.12" *) 3'h6;
  assign _12_ = aluop[2:0] == (* full_case = 32'd1 *) (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:19.5-28.12" *) 3'h5;
  assign _13_ = aluop[2:0] == (* full_case = 32'd1 *) (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:19.5-28.12" *) 3'h4;
  assign _14_ = aluop[2:0] == (* full_case = 32'd1 *) (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:19.5-28.12" *) 3'h3;
  assign _15_ = aluop[2:0] == (* full_case = 32'd1 *) (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:19.5-28.12" *) 3'h2;
  assign _16_ = aluop[2:0] == (* full_case = 32'd1 *) (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:19.5-28.12" *) 3'h1;
  assign _17_ = ! (* full_case = 32'd1 *) (* src = "alu_8bit.v:0.0-0.0|alu_8bit.v:19.5-28.12" *) aluop[2:0];
  assign _18_ = a - (* src = "alu_8bit.v:22.28-22.33" *) 32'd1;
  assign _19_ = b - (* src = "alu_8bit.v:25.28-25.33" *) 32'd1;
  assign _20_ = a ^ (* src = "alu_8bit.v:41.31-41.36" *) b;
endmodule
